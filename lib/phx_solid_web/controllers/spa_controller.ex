defmodule PhxSolidWeb.SPAController do
  use PhxSolidWeb, :controller
  require Logger

  @title "<title>Solid App</title>"
  @spa_dir System.get_env("SPA_DIR")

  defp read_line(curr, file, token) do
    case String.trim(curr) do
      @title ->
        file <> @title <> token

      curr ->
        file <> curr
    end
  end

  @doc """
  Reads the index.html generated by the framework and appends the user token for socket.js to collect it
  """
  def index(conn, _params) do
    conn |> dbg()

    case get_user_token(conn) do
      nil ->
        send_unauthorized_response(conn, :unauthorized)

      user ->
        nonce = PhxSolid.gen_secret()
        user_phx_token = PhxSolid.Token.user_generate(user.id)

        token =
          ~s(<script nonce="#{nonce}">window.userPhxToken="#{user_phx_token}"</script>\n)
          |> dbg()

        html_content = read_html_content(token)

        if html_content != nil do
          Phoenix.Controller.html(conn, html_content)
        else
          send_unauthorized_response(conn, :file_error)
        end
    end
  end

  defp get_user_token(conn) do
    conn
    |> get_session()
    |> Map.get("user_token")
    |> PhxSolid.Accounts.get_user_by_session_token()
    |> dbg()
  end

  defp read_html_content(token) do
    try do
      Path.join([
        Application.app_dir(:phx_solid),
        @spa_dir,
        "index.html"
      ])
      |> File.stream!([], :line)
      |> Enum.reduce("", &read_line(&1, &2, token))
    rescue
      e in File.Error ->
        Logger.error("#{__MODULE__}: Error reading HTML file: #{inspect(e)}")
        nil
    end
  end

  defp send_unauthorized_response(conn, reason) do
    conn
    |> clear_flash()
    |> put_flash(:error, reason)
    |> redirect(to: ~p"/")
  end
end
